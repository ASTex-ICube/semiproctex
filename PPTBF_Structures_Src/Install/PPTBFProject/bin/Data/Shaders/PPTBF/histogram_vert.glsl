////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
// Author(s): anonymous
////////////////////////////////////////////////////////////////////////////////

/******************************************************************************
 * Publication: By-Example Point Process Texture Basis Functions
 * Authors: anonymous
 ******************************************************************************/

/******************************************************************************
 * ...
 ******************************************************************************/

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

// OpenGL
#version 460

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

uniform sampler2D uTexture;
uniform int uTextureWidth;

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Retrieve vertex position
	ivec2 vertexPos;
	vertexPos.x = gl_VertexID % uTextureWidth;
	vertexPos.y = gl_VertexID / uTextureWidth;
	
	// Retrieve PPTBF value
	float pptbf = texelFetch( uTexture, vertexPos, 0 ).r;
 	
	// Rescale data to be able to send it to clip space [-1;1]
	float value = 2.0 * pptbf - 1.0;
	
	// IMPORTANT:
	// We remap value to the range [-1 + 1/nbBins ; 1 - 1/nbBins]
	// to avoid culling problem near clip space borders (i.e. lost data)
	// => i.e. one half pixel on each side
	int nbBins = textureSize( uTexture, 0/*LOD*/ ).x;
	value *= ( float( nbBins - 1 ) / float( nbBins ) );
	
	// Output data to clip-space
	gl_Position = vec4( value, 0.0, 0.0, 1.0 );
}
