////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
// Front to back peeling
// - This shader program is used render a mesh
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 460

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

// Model space vertex position (i.e object space)
layout (location = 0) in vec3 iPosition;
layout (location = 1) in vec2 iTextureCoordinate;
layout (location = 2) in vec3 iNormal;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

// Model-View-Projection matrix
uniform mat4 uViewMatrix;
uniform mat4 uProjectionMatrix;

// Model
uniform mat4 uModelMatrix;
uniform mat3 uNormalMatrix;

// Bump/Displacement
uniform float hmax;
uniform float mirrored;
uniform sampler2D uPPTBFTexture;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

out vec3 vPosition;
out vec2 vTextureCoordinate;
out vec3 vNormal;

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	//float h = 0.1 * hmax * texture( uPPTBFTexture, iTextureCoordinate ).r;
	float h = 0.075 * hmax * texture( uPPTBFTexture, iTextureCoordinate ).r;
	h = h * h;
	
	//vec4 p_eye = uViewMatrix * uModelMatrix * vec4( iPosition, 1.0 );
	vec4 p_eye = uViewMatrix * uModelMatrix * vec4( iPosition + h * iNormal, 1.0 ) ;
	
	vPosition = p_eye.xyz;
	vTextureCoordinate = iTextureCoordinate;
	vNormal = uNormalMatrix * iNormal;
	
	// Transform model space position to clip space
	gl_Position = uProjectionMatrix * p_eye;
}
