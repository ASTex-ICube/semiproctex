////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
////////////////////////////////////////////////////////////////////////////////

/******************************************************************************
 * Publication: By-Example Point Process Texture Basis Functions
 * Authors: anonymous
 ******************************************************************************/

/******************************************************************************
 * Procedural vertex shader
 *
 * Only one triangle covering screen is rendered
 * - there is neither no VBO, nor VAO: only 1 triangle with 3 points is requested as a draw command in the GL pipeline
 * - based on gl_VertexID, one can deduce triangle geometry on-th-fly and send data to clip space
 ******************************************************************************/

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

// OpenGL
#version 460

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

// Texture coordinates
out vec2 texCoord;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Compute vertex position
	float x = -1.0 + float( ( gl_VertexID & 1 ) << 2 );
	float y = -1.0 + float( ( gl_VertexID & 2 ) << 1 );
	
	// Compute texture coordinates
	texCoord.x = x * 0.5 + 0.5;
	texCoord.y = y * 0.5 + 0.5;
	//texCoord = texCoord * 0.5 + 0.5;
	
	// Send position to clip space
	gl_Position = vec4( x, y, 0.0, 1.0 );
}
