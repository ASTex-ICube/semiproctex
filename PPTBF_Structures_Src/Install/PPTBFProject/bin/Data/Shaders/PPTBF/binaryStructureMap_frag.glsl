////////////////////////////////////////////////////////////////////////////////
//
// FRAGMENT SHADER
//
////////////////////////////////////////////////////////////////////////////////

/******************************************************************************
 * Publication: By-Example Point Process Texture Basis Functions
 * Authors: anonymous
 ******************************************************************************/

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

// OpenGL
#version 460

// WebGL
//#version 300 es
//precision highp float;

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

// Texture coordinates
in vec2 texCoord;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

layout (location = 0) out vec4 oColor;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

// Texture
uniform sampler2D uTexture;

uniform float uThreshold;
uniform float uMinValue;
uniform float uMaxValue;
uniform float uMeanValue;
uniform int uSelected;

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Retrieve PPTBF
	float pptbf = texture( uTexture, texCoord ).r;
	
	// Check data validity
	if ( isnan( pptbf ) || isinf( pptbf ) )
	{
		pptbf = 0.0;
	}
	
	// Normalization
	if ( pptbf < uMeanValue )
	{
		pptbf = ( pptbf - uMinValue ) / ( uMeanValue - uMinValue ) * 0.5;
	}
	else
	{
		pptbf = ( pptbf - uMeanValue ) / ( uMaxValue - uMeanValue ) * 0.5 + 0.5;
	}
		
	// Threshold => binary structure map
	vec3 color = vec3( 0.0 );
	if ( pptbf > uThreshold )
	{
		// - binary structure map
		if ( uSelected == 1 )
		{
			color = vec3( 1.0, 0.0, 0.0 );	
		}
		else
		{
			color = vec3( 1.0 );
		}
	}
	
	// Write color
	oColor = vec4( color, 1.0 );
}
